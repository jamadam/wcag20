<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="SCR30">
   <short-name>リンクテキストを変更するために、スクリプトを使用する</short-name>
   <applicability>
      <p>HTML 及び XHTML で使用されるクライアントサイドスクリプト</p>
   </applicability>
   <applies-to>
      <success-criterion idref="navigation-mechanisms-refs" relationship="sufficient"/>
      <success-criterion idref="navigation-mechanisms-link" relationship="sufficient"/>
   </applies-to>
   <description>
    <p>この達成方法の目的は、リンクが文脈以外でも理解可能になるように、追加情報をリンクテキストに加えることを利用者が選択できるようにすることである。</p>
    <p>一部の利用者は、リンクの文脈を参照する必要がないように、リンクがすべてを含んでいることを好む。別の利用者は、それぞれのリンクに文脈に関する情報が含まれていると、反復されてサイトの使い勝手が低下すると感じている。支援技術の利用者の間では、どちらが好ましいかに関して、ワーキンググループへのフィードバックは分かれている。この達成方法は、利用者自身にとって良い方法を選ぶことを可能にする。</p>
    <p>どのようなリンクの目的を理解する場合でも追加の文脈が必要とならないようにするため、そのページのリンクのリンクテキストを展開するページの先頭近くにリンクが提供される。展開されるリンクの目的がそのリンクテキストから、常に直接理解可能でなければならない。</p>
    <p>この達成方法では、現在表示されているページのリンクだけを展開する。利用者がそのサイトに対して 1 度だけ設定を行えば良いようにするために、設定情報を Cookie 又はサーバーサイドのユーザプロファイルに保存することも可能であり、場合によってはそれが望ましい。</p>
  </description>
   <examples>
      <eg-group>
      <description><p>この例では、JavaScript を用いて直接リンクのテキストに文脈上の情報を追加する。link クラスはどのテキストを追加するかを決定する。「リンクを展開する」リンクが選択されたとき、ページ内のそれぞれのリンクにテキストを追加すべきかがテストされる。</p>
</description>
         <code><![CDATA[
...
<script type="text/javascript">
var expanded = false;
var linkContext = {
	"hist":" version of The History of the Web",
	"cook":" version of Cooking for Nerds"
};

function doExpand() {
	var links = document.links;
	
	for (link of links) {
		var cn = link.className;
		if (linkContext[cn]) {
			span = link.appendChild(document.createElement("span"));
			span.setAttribute("class", "linkexpansion");
			span.appendChild(document.createTextNode(linkContext[cn]));
		}
	}
	objUpdate = document.getElementById('expand');
	if (objUpdate)
	{
		objUpdate.childNodes[0].nodeValue = "Collapse links";
	}
	expanded = true;
}

function doCollapse() {
	objUpdate = document.getElementById('expand');
	var spans = document.getElementsByTagName("span");
	var span;

	// リンク一式を戻り、文頭から削除することで配列の添え数を変更する
	// そして処理を乱す
	for (i = spans.length - 1; i >= 0; i--) {
		span = spans[i];
		if (span.getAttribute("class") == "linkexpansion")
			span.parentNode.removeChild(span);
	}
	if (objUpdate)
	{
		objUpdate.childNodes[0].nodeValue = "Expand links";
	}
	expanded = false;
}

function toggle() {
	if (expanded) doCollapse();
	else doExpand();
}
</script>

...

<h1>Books for download</h1>
<p><button id="expand" onclick="toggle();">Expand Links</button></p>
<ul>
	<li>The History of the Web: <a href="history.docx" class="hist">Word</a>, <a href="history.pdf" class="hist">PDF</a>, <a href="history.html" class="hist">HTML</a> </li>

	<li>Cooking for Nerds: <a href="history.docx" class="cook">Word</a>, <a href="history.pdf" class="cook">PDF</a>, <a href="history.html" class="cook">HTML</a> </li>
</ul>
...
]]></code>
         <description>
            <p>このコードの実装サンプル: <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                    href="https://www.w3.org/WAI/WCAG20/Techniques/working-examples/SCR30/expand-links"><!--
                    linktype="examples"-->要求に応じてリンクを展開する</loc>。</p>
         </description>    </eg-group>
   </examples>
   <related-techniques>
      <relatedtech idref="G91"/>
      <relatedtech idref="H30"/>
      <relatedtech idref="H33"/>
      <relatedtech idref="C7"/>
   </related-techniques>
   <tests>
      <procedure>
      <olist>
        <item>
          <p>ページの先頭近くに、リンクを展開するリンクがある。</p>
        </item>
        <item>
          <p>1. で確認したリンクがリンクテキストだけで見つけられる。</p>
        </item>
        <item>
          <p>リンクテキストだけで識別できないリンクをページ中から探す。</p>
        </item>
        <item>
          <p>1. のコントロールを有効にする</p>
        </item>
        <item>
          <p>3. で見つけたリンクの目的が、リンクテキストだけで確認できる。</p>
        </item>
      </olist>
    </procedure>
      <expected-results>
         <ulist>
            <item>
               <p>1., 2. 及び 5. を満たしている。</p>
            </item>
         </ulist>
      </expected-results>
   </tests>
</technique>
