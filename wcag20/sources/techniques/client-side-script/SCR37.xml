<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="SCR37">
   <short-name>デバイス非依存な方法でカスタムダイアログを作成する</short-name>
   <applicability>
      <p>スクリプトで使用される HTML 及び XHTML</p>
   </applicability>
   <applies-to>
      <success-criterion idref="navigation-mechanisms-focus-order" relationship="sufficient"/>
   </applies-to>
   <description>
    <p>コンテンツ制作者はしばしば、ブラウザによって提供されるポップアップウインドウを使わずに、独自のダイアログを作成したがる。これは通常、ダイアログのコンテンツを <el>div</el> の中に収めて、その <el>div</el> をコンテンツの上に CSS による重なり順及び絶対配置を用いて配置するというやり方でおこなわれる。</p>
    <p>これらのダイアログをアクセシブルにするには、いくつかの簡単なルールに従う必要がある。</p>
    <olist>
      <item>
        <p>リンクやボタンの <code>onclick</code> イベントからダイアログを起動するスクリプトをトリガーにする。</p>
      </item>
      <item>
        <p>ダイアログの <code>div</code> を Document Object Model (DOM) の中、トリガーした要素の直後に配置する。トリガーした要素がフォーカスを保持し、ダイアログのコンテンツをその要素のあとに挿入することで、ダイアログの中のコンテンツがスクリーンリーダーの読み上げ順序で次になり、タブ順序も次になる。それでも、ダイアログは視覚的にページ上のあらゆる場所に絶対配置できる。これは、下の例のようにダイアログを HTML の中で作成し、CSS で非表示にする方法又は、トリガーした要素の直後にスクリプトで挿入する方法のどちらでも実装できる。</p>
      </item>
      <item>
        <p>ダイアログの div 内部の HTML が、その他のコンテンツと同じアクセシビリティガイドラインの要件を満たしていることを保証する。</p>
      </item>
    </olist>
    <p>リンクがダイアログを開閉できたり、キーボードのフォーカスが外れるとダイアログが閉じるようにしたりすることはすばらしいが、必ずしも必要なわけではない。</p>
      <a11ysuprorted rating="pass" exnumber="0"/>
  </description>
   <examples>
      <eg-group>
      <head>ダイアログを開くオプションボタン</head>
      <description><p>この例の HTML には、トリガーとなる要素、この場合はボタンとダイアログのフレームとして機能する div がある。</p>
<p>トリガーとなる要素はボタンで、スクリプトは onclick イベントのトリガーである。これは適切なイベントをオペレーティングシステムに送るので、支援技術は DOM の中の変化に気がつくことができる。</p>
<p>この例では、ダイアログ内の送信及びリセットボタンは単純に <code>div</code> に隠れている。</p>
</description>
         <code role="xhtml1"><![CDATA[...
<button onclick="TogglePopup(event,true)"
	name="pop0001">Options</button>
<div class="popover" id="pop0001">
  <h3>Edit Sort Information</h3>
  <form action="default.htm" onsubmit="this.parentNode.style.display='none'; return false;" onreset="this.parentNode.style.display='none'; return false;">
    <fieldset>
      <legend>Sort Order</legend> 
      <input type="radio" name="order" id="order_alpha" /><label for="order_alpha">Alphabetical</label>
      <input type="radio" name="order" id="order_default" checked="true" /><label for="order_default">Default</label>
    </fieldset>
<div class="buttons">
  <input type="submit" value="OK" />
  <input type="reset" value="Cancel" />
</div>
</form>
</div>
...
]]></code>
      <description><p><code>div</code>、見出し、及び <el>form</el> 要素は CSS でダイアログに見えるようにスタイル付けされている。</p>
</description>
      <code role="css"><![CDATA[...
a { color:blue; }
a.clickPopup img { border:none; width:0; }

div.popover { position:absolute; display:none; border:1px outset; background-color:beige; font-size:80%; background-color:#eeeeee; color:black; }
div.popover h3 { margin:0; padding:0.1em 0.5em; background-color:navy; color:white; }
#pop0001 { width:20em; }
#pop0001 form { margin:0; padding:0.5em; }
#pop0001 fieldset { margin-bottom:0.3em; padding-bottom:0.5em; }
#pop0001 input, #pop0001 label { vertical-align:middle; }
#pop0001 div.buttons { text-align:right; }
#pop0001 div.buttons input { width:6em; }
...]]></code>
      <description><p>スクリプトはポップアップする <code>div</code> の表示を切り替え、表示させたり隠したりする。</p>
</description>
      <code role="css"><![CDATA[...
function TogglePopup(evt,show)
{
	HarmonizeEvent(evt);
	var src = evt.target;
	if ("click" == evt.type)
	{
		evt.returnValue = false;
	}
	var popID = src.getAttribute("name");
	if (popID)
	{
		var popup = document.getElementById(popID);
		if (popup)
		{
			if (true == show)
			{
				popup.style.display = "block";
			}
			else if (false == show)
			{
				popup.style.display = "none";
			}
			else
			{
				popup.style.display = "block" == popup.style.display ? "none" : "block";
			}
			if ("block" == popup.style.display)
			{
				//window.alert(document.documentElement.scrollHeight);
				popup.style.top = ((document.documentElement.offsetHeight - popup.offsetHeight) / 2 ) + 'px';
				popup.style.left = ((document.documentElement.offsetWidth - popup.offsetWidth) / 2) + 'px';
			}
		}
	}
}

function SubmitForm(elem)
{ 
	elem.parentNode.style.display='none'; 
	return false;
}

function ResetForm(elem)
{ 
	elem.parentNode.style.display='none'; 
	return false;
}
...]]></code>
  <description><p>このコードの実装サンプル: <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/WAI/WCAG20/Techniques/working-examples/SCR37/default.htm"><!-- linktype="examples"-->ダイアログを開くオプションボタン</loc></p>
</description>
    </eg-group>
   </examples>
   <resources>
      <see-also>
         <ulist>
            <item>
               <p>Microsoft Developer Network Whitepaper:<loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="http://download.microsoft.com/download/0/f/5/0f5e941c-c495-401a-9031-eab8315da35e/writing_accessible_web_applications.doc"> Writing Accessible Web Applications</loc> by Cynthia C. Shelly and George Young. (Microsoft Word Format)</p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/ms695716.aspx">Microsoft Active Accessibility 2.0 SDK</loc>. Includes Inspect32.exe and other MSAA tools.</p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd318521(v=vs.85).aspx">Instructions for the Inspect tool</loc>
               </p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="http://www.eramp.com/david/name-role-value-using-inspect.htm">Using the Inspect tool to find name Name, Role and Value for Javascript</loc>
               </p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="http://www.microsoft.com/en-us/download/details.aspx?id=18359">Microsoft Internet Explorer Developer Toolbar.</loc>. Allows examination of script-generated DOM in Microsoft Internet Explorer</p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://getfirebug.com/">Firebug</loc>. Allows examination of script-generated DOM in Firefox. </p>
            </item>
         </ulist>
      </see-also>
   </resources>
   <related-techniques>
      <relatedtech idref="SCR26"/>
      <relatedtech idref="G59"/>
      <!-- @@ Inserting Inline Error Messages  -->
   </related-techniques>
   <tests>
      <procedure>
      <olist>
        <item>
          <p>ポップアップウインドウでないダイアログのトリガーとなるものページ内の全ての場所を探す。</p>
        </item>
        <item>
          <p>Tab キーでその場所に移動して Enter キーを押下することで、ダイアログを開くことができることを確認する。</p>
        </item>
        <item>
          <p>一度開いたら、タブ順序でダイアログが次の位置にあることを確認する。</p>
        </item>
        <item>
          <p>ダイアログがボタン又はリンクのクリックイベントからトリガーされていることを確認する。</p>
        </item>
        <item>
          <p>スクリプトによって生成された DOM を検証できるツールを用いて、DOM 内でダイアログが次にあることを確認する。</p>
        </item>
      </olist>
    </procedure>
      <expected-results>
         <ulist>
            <item>
               <p>2.、3.、4. 及び 5. が真である。</p>
            </item>
         </ulist>
      </expected-results>
   </tests>
</technique>
