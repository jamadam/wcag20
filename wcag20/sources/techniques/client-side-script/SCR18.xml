<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="SCR18">
   <short-name>クライアントサイドのバリデーション及びアラートを提供する</short-name>
   <applicability>
      <p>利用者の入力を検証するコンテンツ</p>
   </applicability>
   <applies-to>
      <success-criterion idref="minimize-error-identified" relationship="sufficient"/>
      <success-criterion idref="minimize-error-suggestions" relationship="sufficient"/>
      <success-criterion idref="minimize-error-reversible" relationship="sufficient"/>
   </applies-to>
   <description>
    <p>この達成方法の目的は、クライアントサイドのスクリプトによって、各フィールドで利用者が入力する値を確認することである。エラーが見つかった場合、警告ダイアログを表示し、エラーの内容をテキストで示す。警告ダイアログを閉じるとともに、スクリプトによってキーボードフォーカスをエラーが起こったフィールドに移動させれば、それは利用者にとって役立つ。</p>
  </description>
   <examples>
      <eg-group>
      <head>イベントハンドラで単一のコントロールをチェックする</head>
      <description><p>以下のスクリプトは、有効な日付がフォームのコントロールに入力されたかをチェックする。</p>
</description>
         <code><![CDATA[
<label for="date">Date:</label>
<input type="text" name="date" id="date" 
onchange="if(isNaN(Date.parse(this.value))) 
alert('This control is not a valid date. 
Please re-enter the value.');" />
]]></code>
    </eg-group>
   	<eg-group>
   		<head>利用者がフォームを送信したときに複数のコントロールをチェックする</head>
   		<description>
   			<p>次の例はフォーム内の複数のコントロールを表している。<el>form</el> 要素は、利用者がフォームを送信しようとした際、検証スクリプトを実行するために、イベントハンドラを作成する <att>onsubmit</att> 属性を用いている。検証で問題がない場合、イベントは <propval>true</propval> を返し、フォームの送信を続行する。検証でエラーが検出された場合は、利用者が問題を修正できるようエラーメッセージを表示し、送信を取り消すために <propval>false</propval> を返す。</p>
   			<note>
   				<p>この事例は簡潔さのためにアラートを用いて説明している。利用者により役立つ通知は、問題のあるコントロールをハイライトし、エラーの内容とデータの修正が必要なコントロールに移動する方法をページ上に示すことである。</p>
   				<p>この事例では簡潔さのために <el>form</el> 要素に <att>onsubmit</att> 属性を用いているが、通常であればページがロードした際にフォーム送信用のイベントリスナーを作成する。</p>
   			</note>
   			<p>スクリプトコード:</p>
   			<codeblock><![CDATA[
function validate() {
	// initialize error message
	var msg = "";
	
	//validate name
	var pattern = /^[a-zA-Z\s]+$/;
	var el = document.getElementById("name");
	if (!pattern.test(el.value))  msg += "Name can only have letters and spaces. ";
	
	// validate number
	var pattern = /^[\d\-+\.\s]+$/;
	var el = document.getElementById("tel");
	if (!pattern.test(el.value))  msg += "Telephone number can only have digits and separators. ";
	
	if (msg != "") {
		alert(msg);
		return false;
	} else return true;
}
]]></codeblock>
   			<p>フォームコード:</p>
   			<codeblock><![CDATA[
<form action="multiple-controls.html" onsubmit="return validate()">
	<p>
		<label for="name">Name: </label>
		<input type="text" name="name" id="name" />
	</p>
	<p>
		<label for="tel">Telephone number: </label>
		<input type="text" name="tel" id="tel" />				
	</p>
	<p>
		<input type="submit" />
	</p>
</form>
]]></codeblock>
   			<p><loc href="https://www.w3.org/WAI/WCAG20/Techniques/working-examples/SCR18/multiple-controls.html"><!-- linktype="examples"-->利用者がフォームを送信したときに複数のコントロールをチェックする実装例</loc>にこの実装方法のデモがある。</p>
   		</description>
   	</eg-group>
   </examples>
   <related-techniques>
      <relatedtech idref="G89"/>
   </related-techniques>
   <tests>
      <procedure>
      <p>特定の入力を必要とするフォームのフィールドに対して:</p>
      <olist>
        <item>
          <p>無効なデータを入力する。</p>
        </item>
        <item>
          <p>エラーを説明している警告が提供されている。</p>
        </item>
      </olist>
    </procedure>
      <expected-results>
         <ulist>
            <item>
               <p>2. を満たしている</p>
            </item>
         </ulist>
      </expected-results>
   </tests>
</technique>
