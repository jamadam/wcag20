<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="SCR28">
   <short-name>コンテンツのブロックをバイパスするために、展開可能及び折り畳み可能なメニューを使用する</short-name>
   <applicability>
      <p>クライアントサイドスクリプティングを提供するウェブコンテンツ技術</p>
   </applicability>
   <applies-to>
      <success-criterion idref="navigation-mechanisms-skip" relationship="sufficient"/>
   </applies-to>
   <description>
    <p>この達成方法は、繰り返される構成要素を利用者のコントロールの下でメニューを展開したり折りたたんだりできるメニューの中に置くことで、その構成要素をスキップできるようにする。利用者は、メニューを折りたたむことで繰り返される構成要素をスキップできる。利用者は、メニューの要素を隠したり削除したりするユーザインタフェースを呼び出すことができる。関連情報には、ナビゲーションをスキップするメカニズムを提供するために利用できるメニュー、ツールバー及びツリーの達成方法をいくつか挙げている。</p>
    <note><p>類似の方法は、サーバーサイドスクリプティングを用いて修正後のウェブページを読み込むことでも実装できる。</p>
		</note>
  </description>
   <examples>
      <eg-group>
      <description><p>ウェブページの先頭にあるナビゲーションリンクは、すべて HTML、CSS 及び JavaScript を用いて実装されているメニュー項目である。ナビゲーションバーが展開しているとき、ナビゲーションのリンクは利用可能になっている。ナビゲーションバーがたたまれているとき、リンクは利用不可能である。</p>
</description>
      <code><![CDATA[
...

  <script type="text/javascript">
  function toggle(id){
    var n = document.getElementById(id);
    n.style.display =  (n.style.display != 'none' ? 'none' : '' );
  }
  </script>

...

  <a href="#" onclick="toggle('navbar')">Toggle Navigation Bar</a>
  
  <ul id="navbar">
  <li><a href="http://target1.html">Link 1</a></li>
  <li><a href="http://target2.html">Link 2</a></li>
  <li><a href="http://target3.html">Link 3</a></li>
  <li><a href="http://target4.html">Link 4</a></li>
  </ul>

... ]]></code>
      <description><p>このコードの実装サンプル: <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/WAI/WCAG20/Techniques/working-examples/SCR28/toggle-navbar.html"><!-- linktype="examples"-->ナビゲーションバーをリンクで切り替える</loc></p>
</description>
      <a11ysuprorted rating="pass" exnumber="1"/>
    </eg-group>
    <eg-group>
      <description><p>一連のウェブページのための目次はそれぞれのページの先頭近くで繰り返される。目次の先頭にあるボタンで、利用者はそれを消したり復元したりできる。</p>
</description>
      <code><![CDATA[
...

   <script type="text/javascript">
  function toggle(id){
    var n = document.getElementById(id);
    n.style.display =  (n.style.display != 'none' ? 'none' : '' );
  }
  </script>

  ...

  <button onclick="return toggle('toc');">Toggle Table of Contents</button>
  <div id="toc">
    ...
  </div>

...]]></code>
      <description><p>このコードの実装サンプル: <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/WAI/WCAG20/Techniques/working-examples/SCR28/toggle-toc.html"><!-- linktype="examples"-->目次をボタンで切り替える</loc></p>
</description>
      <a11ysuprorted rating="pass" exnumber="2"/>
    </eg-group>
   </examples>
   <resources>
      <see-also>
         <ulist>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="http://www.bobbyvandersluis.com/articles/unobtrusive-show-hide/">Unobtrusive show/hide behavior reloaded</loc>
               </p>
            </item>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="http://www.dustindiaz.com/seven-togglers/">Seven ways to toggle an element with JavaScript</loc>
               </p>
            </item>
         </ulist>
      </see-also>
   </resources>
   <related-techniques>
      <relatedtech idref="H69"/>
      <relatedtech idref="H70"/>
      <!--  @@  the following were unaccepted wiki drafts at the time this tech was xmlized
                    # Using lists and links to make a click menu
                    # Using lists and links to make a hover menu
                    # Using lists and links to make a toolbar
                    # Using lists and links to make a menu bar
                    # Using lists and links to make a tree control -->
   </related-techniques>
   <tests>
      <procedure>
      <olist>
        <item>
          <p>ユーザインタフェースコントロールで、繰り返されるコンテンツを展開したり折りたたんだりできることを確認する。</p>
        </item>
        <item>
          <p>コンテンツが展開されたとき、それが読み上げ順序の論理的な場所でプログラムによる解釈が可能なコンテンツに含まれていることを確認する。</p>
        </item>
        <item>
          <p>コンテンツが折りたたまれているとき、それがプログラムによる解釈が可能でない部分にあることを確認する。</p>
        </item>
      </olist>
    </procedure>
      <expected-results>
         <ulist>
            <item>
               <p>上記の全ての項目の結果が真である。</p>
            </item>
         </ulist>
      </expected-results>
   </tests>
</technique>
