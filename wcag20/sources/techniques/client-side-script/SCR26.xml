<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="SCR26">
   <short-name>動的なコンテンツを、Document Object Model の、そのトリガーとなる要素の直後に挿入する</short-name>
   <applicability>
      <p>HTML 及び XHTML、スクリプト</p>
   </applicability>
   <applies-to>
      <!--success-criterion idref="keyboard-operation-keyboard-operable"/-->
      <success-criterion idref="navigation-mechanisms-focus-order" relationship="sufficient"/>
      <!--success-criterion idref="navigation-mechanisms-focus-visible"/-->
   </applies-to>
   <description>
    <p>この達成方法の目的は、Document Object Model (DOM) に挿入されたユーザインタフェースの要素をタブ順序及びスクリーンリーダーの読み上げ順序がユーザエージェント標準のふるまいによって正しく設定されるような方法で配置することである。この達成方法は、メニューやダイアログのように隠れているものと表示されているもの、全てのユーザインタフェース要素に利用することができる。</p>
    <p>スクリーンリーダーの読み上げ順序は、Document Object Model 内の HTML 又は XHTML の要素の順序に基づいており、それはタブ順序についても同様である。この達成方法では、新しいコンテンツを DOM のそのトリガーとなる要素の直後に挿入する。トリガーとなる要素は、リンク又はボタンでなければならず、スクリプトはその onclick イベントにより呼び出されなければならない。これらの要素はもともとフォーカス可能であり、その onclick イベントはデバイスに依存しない。フォーカスは選択された要素に残り、その後に挿入された新しいコンテンツは、タブ順序及びスクリーンリーダーの読み上げ順序の両方において、次の順番となる。</p>
    <p>この達成方法は同期された更新にも利用できることに注目して欲しい。(AJAX と呼ばれることのある) 非同期の更新では、支援技術に非同期のコンテンツが挿入されたことを通知するために追加の達成方法が必要となる。</p>
    <a11ysuprorted rating="good" exnumber="0"/>
  </description>
   <examples>
      <eg-group>
      <description><p>この例では、リンクがクリックされた際にメニューを生成し、そのリンクの後に挿入する。リンクの onclick イベントは新しいメニューのための ID をパラメータとして渡す ShowHide スクリプトを呼び出すために使用される。</p>
</description>
      <code role="xhtml"><![CDATA[<a href="#" onclick="ShowHide('foo',this)">Toggle</a>]]></code>
      <description><p>ShowHide スクリプトは新しいメニューを含む div を生成し、リンクを挿入する。最終行がスクリプトの核心となる。スクリプトのトリガーとなる要素の親を探し、新しい子として生成された div をそれに追加する。これにより、新しい div は DOM 内でリンクの次になる。利用者がタブを押したときには、フォーカスがメニュー内で最初のフォーカス可能な項目となる生成されたリンクに移動する。</p>
</description>
      <code role="script"><![CDATA[
function ShowHide(id,src)
{
	var el = document.getElementById(id);
	if (!el)
	{
		el = document.createElement("div");
		el.id = id;
		var link = document.createElement("a");
		link.href = "javascript:void(0)";
		link.appendChild(document.createTextNode("Content"));
		el.appendChild(link);
		src.parentElement.appendChild(el);
	}
	else
	{
		el.style.display = ('none' == el.style.display ? 'block' : 'none');
	}
} ]]></code>
      <description><p>CSS は div およびリンクをメニューのように見せるために利用される。</p>
</description>
    </eg-group>
   </examples>
   <tests>
      <procedure>
      <olist>
        <item>
          <p>ポップアップではないダイアログのトリガーとなる全てのエリアを探す。</p>
        </item>
        <item>
          <p>そのダイアログがボタン又はリンクのクリックイベントによりトリガーされる。</p>
        </item>
        <item>
          <p>スクリプトによって生成された DOM を調査できるツールを使って、ダイアログが DOM 内で次の位置にきている。</p>
        </item>
      </olist>
    </procedure>
      <expected-results>
         <ulist>
            <item>
               <p>2. 及び 3. の結果が真である。</p>
            </item>
         </ulist>
      </expected-results>
   </tests>
</technique>
